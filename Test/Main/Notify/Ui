local TweenService = game:GetService("TweenService")
local TextService = game:GetService("TextService")
local CoreGui = game:GetService("CoreGui")

-- Settings
local Settings = {
    SizeMultiplier = 1.2  -- Default size multiplier (20% bigger)
}

-- Define tween information
local TweenTable = {
    notification_load = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut),
    notification_wait = TweenInfo.new(2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut),
    notification_reset = TweenInfo.new(0.4, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut),
}

local function Notify(text, duration, type)
    -- Clear existing notifications
    for i, v in next, CoreGui:GetChildren() do
        if v.Name == "Notifications" then
            v:Destroy()
        end
    end

    local Notifications = Instance.new("ScreenGui")
    local notificationsLayout = Instance.new("UIListLayout")
    local notificationsPadding = Instance.new("UIPadding")

    Notifications.Name = "Notifications"
    Notifications.Parent = CoreGui
    Notifications.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

    notificationsLayout.Name = "notificationsLayout"
    notificationsLayout.Parent = Notifications
    notificationsLayout.SortOrder = Enum.SortOrder.LayoutOrder
    notificationsLayout.Padding = UDim.new(0, 4)

    notificationsPadding.Name = "notificationsPadding"
    notificationsPadding.Parent = Notifications
    notificationsPadding.PaddingLeft = UDim.new(0, 6)
    notificationsPadding.PaddingTop = UDim.new(0, 18)

    local edge = Instance.new("Frame")
    local edgeCorner = Instance.new("UICorner")
    local background = Instance.new("Frame")
    local barFolder = Instance.new("Folder")
    local bar = Instance.new("Frame")
    local barCorner = Instance.new("UICorner")
    local barLayout = Instance.new("UIListLayout")
    local backgroundGradient = Instance.new("UIGradient")
    local backgroundCorner = Instance.new("UICorner")
    local notifText = Instance.new("TextLabel")
    local notifPadding = Instance.new("UIPadding")
    local backgroundLayout = Instance.new("UIListLayout")

    edge.Name = "edge"
    edge.Parent = Notifications
    edge.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    edge.BackgroundTransparency = 1.000
    edge.Size = UDim2.new(0, 0, 0, 26)

    edgeCorner.CornerRadius = UDim.new(0, 2)
    edgeCorner.Name = "edgeCorner"
    edgeCorner.Parent = edge

    background.Name = "background"
    background.Parent = edge
    background.AnchorPoint = Vector2.new(0.5, 0.5)
    background.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    background.BackgroundTransparency = 1.000
    background.ClipsDescendants = true
    background.Position = UDim2.new(0.5, 0, 0.5, 0)
    background.Size = UDim2.new(0, 0, 0, 24)

    barFolder.Name = "barFolder"
    barFolder.Parent = background

    bar.Name = "bar"
    bar.Parent = barFolder
    bar.BackgroundColor3 = Color3.fromRGB(159, 115, 255)
    bar.BackgroundTransparency = 0.200
    bar.Size = UDim2.new(0, 0, 0, 1)
    if type == "notification" then
        bar.BackgroundColor3 = Color3.fromRGB(159, 115, 255)
    elseif type == "alert" then
        bar.BackgroundColor3 = Color3.fromRGB(255, 246, 112)
    elseif type == "error" then
        bar.BackgroundColor3 = Color3.fromRGB(255, 74, 77)
    elseif type == "success" then
        bar.BackgroundColor3 = Color3.fromRGB(131, 255, 103)
    elseif type == "information" then
        bar.BackgroundColor3 = Color3.fromRGB(126, 117, 255)
    end

    barCorner.CornerRadius = UDim.new(0, 2)
    barCorner.Name = "barCorner"
    barCorner.Parent = bar

    barLayout.Name = "barLayout"
    barLayout.Parent = barFolder
    barLayout.SortOrder = Enum.SortOrder.LayoutOrder

    backgroundGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(34, 34, 34)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(28, 28, 28))}
    backgroundGradient.Rotation = 90
    backgroundGradient.Name = "backgroundGradient"
    backgroundGradient.Parent = background

    backgroundCorner.CornerRadius = UDim.new(0, 2)
    backgroundCorner.Name = "backgroundCorner"
    backgroundCorner.Parent = background

    notifText.Name = "notifText"
    notifText.Parent = background
    notifText.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    notifText.BackgroundTransparency = 1.000
    notifText.Size = UDim2.new(0, 230 * Settings.SizeMultiplier, 0, 26 * Settings.SizeMultiplier)
    notifText.Font = Enum.Font.Code
    notifText.Text = text
    notifText.TextColor3 = Color3.fromRGB(198, 198, 198)
    notifText.TextSize = 14 * Settings.SizeMultiplier
    notifText.TextTransparency = 1.000
    notifText.TextXAlignment = Enum.TextXAlignment.Left
    notifText.RichText = true

    notifPadding.Name = "notifPadding"
    notifPadding.Parent = notifText
    notifPadding.PaddingBottom = UDim.new(0, 4 * Settings.SizeMultiplier)
    notifPadding.PaddingLeft = UDim.new(0, 4 * Settings.SizeMultiplier)
    notifPadding.PaddingRight = UDim.new(0, 4 * Settings.SizeMultiplier)
    notifPadding.PaddingTop = UDim.new(0, 4 * Settings.SizeMultiplier)

    backgroundLayout.Name = "backgroundLayout"
    backgroundLayout.Parent = background
    backgroundLayout.SortOrder = Enum.SortOrder.LayoutOrder
    backgroundLayout.VerticalAlignment = Enum.VerticalAlignment.Center

    local NewSize = TextService:GetTextSize(notifText.Text, notifText.TextSize, notifText.Font, Vector2.new(math.huge, math.huge))
    local IsRunning = false
    coroutine.wrap(function()
        IsRunning = true
        TweenService:Create(edge, TweenTable["notification_load"], {BackgroundTransparency = 0}):Play()
        TweenService:Create(background, TweenTable["notification_load"], {BackgroundTransparency = 0}):Play()
        TweenService:Create(notifText, TweenTable["notification_load"], {TextTransparency = 0}):Play()
        TweenService:Create(edge, TweenTable["notification_load"], {Size = UDim2.new(0, NewSize.X + 10 * Settings.SizeMultiplier, 0, 26 * Settings.SizeMultiplier)}):Play()
        TweenService:Create(background, TweenTable["notification_load"], {Size = UDim2.new(0, NewSize.X + 8 * Settings.SizeMultiplier, 0, 24 * Settings.SizeMultiplier)}):Play()
        TweenService:Create(notifText, TweenTable["notification_load"], {Size = UDim2.new(0, NewSize.X + 8 * Settings.SizeMultiplier, 0, 24 * Settings.SizeMultiplier)}):Play()
        wait()
        TweenService:Create(bar, TweenTable["notification_wait"], {Size = UDim2.new(0, NewSize.X + 8 * Settings.SizeMultiplier, 0, 1)}):Play()
        repeat wait() until bar.Size == UDim2.new(0, NewSize.X + 8 * Settings.SizeMultiplier, 0, 1)
        IsRunning = false
        TweenService:Create(edge, TweenTable["notification_load"], {BackgroundTransparency = 1}):Play()
        TweenService:Create(background, TweenTable["notification_load"], {BackgroundTransparency = 1}):Play()
        TweenService:Create(notifText, TweenTable["notification_load"], {TextTransparency = 1}):Play()
        TweenService:Create(bar, TweenTable["notification_load"], {BackgroundTransparency = 1}):Play()
        TweenService:Create(edge, TweenTable["notification_load"], {Size = UDim2.new(0, 0, 0, 26 * Settings.SizeMultiplier)}):Play()
        TweenService:Create(background, TweenTable["notification_load"], {Size = UDim2.new(0, 0, 0, 24 * Settings.SizeMultiplier)}):Play()
        TweenService:Create(notifText, TweenTable["notification_load"], {Size = UDim2.new(0, 0, 0, 24 * Settings.SizeMultiplier)}):Play()
        TweenService:Create(bar, TweenTable["notification_load"], {Size = UDim2.new(0, 0, 0, 1)}):Play()
        wait(0.2)
        edge:Destroy()
    end)()
end

-- Test notifications
Notify("Hello", 1, "notification")
wait(2)
Notify("Testing notification", 1, "notification")
wait(2)
Notify("Notification length testing longer", 1, "notification")
wait(2)
Notify("Ignore those notifications", 2, "alert")
